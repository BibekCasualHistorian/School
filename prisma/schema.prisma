// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
datasource db {
  provider  = "mongodb"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

// MONGODB IMPLEMENTATION
model Account {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// we will not copy session and veriticationtoken from next.js 

model School {
   id    String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  // teachers  Teacher[]
  // students  Student[]
}

model Teacher {
   id    String @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String    @unique

    adminId String? @db.ObjectId
  user User? @relation(fields: [adminId],references: [id])

  groups     Group[]
}

model Student {
   id    String @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String    @unique

  classId String? @db.ObjectId
  class Class? @relation(fields: [classId], references: [id])

     adminId String? @db.ObjectId
  user User? @relation(fields: [adminId],references: [id])
  // schoolId    String  @db.ObjectId
  // school      School    @relation(fields: [schoolId], references: [id])
  // class       Class     @relation(fields: [classId], references: [id])
  // classId     String
}

model Class {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String

  adminId String? @db.ObjectId
  user User? @relation(fields: [adminId],references: [id])

  student Student[]
  groups Group[]
}

model Group {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  
  classId String? @db.ObjectId
  class Class? @relation(fields: [classId], references: [id])

  teacherId   String? @db.ObjectId
  teacher     Teacher?  @relation(fields: [teacherId], references: [id])

  adminId String? @db.ObjectId
  user User? @relation(fields: [adminId],references: [id])

}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[] 
  group Group[]
  teacher Teacher[]
  student Student[]
  role          UserRole@default(STUDENT)
  class Class[]
  // sessions      Session[] // we willn't use it as it is database session
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model PasswordResetToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId()
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Verificationtoken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

// POSTGRES IMPLEMENTATION
// model Account {
//   id                 String  @id @default(cuid())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String? @db.Text
//   access_token       String? @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String? @db.Text
//   session_state      String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }